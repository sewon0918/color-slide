{"ast":null,"code":"var _jsxFileName = \"/Users/imsewon/Desktop/color-slide/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(_ref) {\n  _s();\n\n  let {\n    width,\n    height\n  } = _ref;\n  const canvasRef = useRef(null);\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const [isPainting, setIsPainting] = useState(false);\n\n  const getCoordinates = event => {\n    // if (!canvasRef.current) {\n    //   return;\n    // }\n    const canvas = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    };\n  };\n\n  const drawLine = (originalMousePosition, newMousePosition) => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (context) {\n      context.strokeStyle = \"red\";\n      context.lineJoin = \"round\";\n      context.lineWidth = 5;\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n      context.stroke();\n    }\n  };\n\n  const startPaint = useCallback(event => {\n    const coordinates = getCoordinates(event);\n\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n    }\n  }, []);\n  const paint = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (isPainting) {\n      const newMousePosition = getCoordinates(event);\n\n      if (mousePosition && newMousePosition) {\n        drawLine(mousePosition, newMousePosition);\n        setMousePosition(newMousePosition);\n      }\n    }\n  }, [isPainting, mousePosition]);\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n  }, []);\n\n  const clearCanvas = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", startPaint);\n    canvas.addEventListener(\"mousemove\", paint);\n    canvas.addEventListener(\"mouseup\", exitPaint);\n    canvas.addEventListener(\"mouseleave\", exitPaint);\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startPaint);\n      canvas.removeEventListener(\"mousemove\", paint);\n      canvas.removeEventListener(\"mouseup\", exitPaint);\n      canvas.removeEventListener(\"mouseleave\", exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto my-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rounded-lg p-3\",\n      onClick: clearCanvas,\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      height: height,\n      width: width,\n      className: \"rounded-lg bg-gray-200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"VqciyNGFbb7GepeMpJD4MtPMBXo=\");\n\n_c = App;\nApp.defaultProps = {\n  width: 800,\n  height: 600\n};\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/imsewon/Desktop/color-slide/src/App.tsx"],"names":["React","useRef","useState","useCallback","useEffect","App","width","height","canvasRef","mousePosition","setMousePosition","undefined","isPainting","setIsPainting","getCoordinates","event","canvas","current","x","pageX","offsetLeft","y","pageY","offsetTop","drawLine","originalMousePosition","newMousePosition","context","getContext","strokeStyle","lineJoin","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","startPaint","coordinates","paint","preventDefault","stopPropagation","exitPaint","clearCanvas","clearRect","addEventListener","removeEventListener","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from \"react\";\n\ninterface CanvasProps {\n  width: number;\n  height: number;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction App({ width, height }: CanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(\n    undefined\n  );\n  const [isPainting, setIsPainting] = useState(false);\n\n  const getCoordinates = (event: MouseEvent): Coordinate | undefined => {\n    // if (!canvasRef.current) {\n    //   return;\n    // }\n\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop,\n    };\n  };\n\n  const drawLine = (\n    originalMousePosition: Coordinate,\n    newMousePosition: Coordinate\n  ) => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (context) {\n      context.strokeStyle = \"red\";\n      context.lineJoin = \"round\";\n      context.lineWidth = 5;\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n\n      context.stroke();\n    }\n  };\n\n  const startPaint = useCallback((event: MouseEvent) => {\n    const coordinates = getCoordinates(event);\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n    }\n  }, []);\n\n  const paint = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isPainting) {\n        const newMousePosition = getCoordinates(event);\n        if (mousePosition && newMousePosition) {\n          drawLine(mousePosition, newMousePosition);\n          setMousePosition(newMousePosition);\n        }\n      }\n    },\n    [isPainting, mousePosition]\n  );\n\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n  }, []);\n\n  const clearCanvas = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    canvas.getContext(\"2d\")!!.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n\n    canvas.addEventListener(\"mousedown\", startPaint);\n    canvas.addEventListener(\"mousemove\", paint);\n    canvas.addEventListener(\"mouseup\", exitPaint);\n    canvas.addEventListener(\"mouseleave\", exitPaint);\n\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startPaint);\n      canvas.removeEventListener(\"mousemove\", paint);\n      canvas.removeEventListener(\"mouseup\", exitPaint);\n      canvas.removeEventListener(\"mouseleave\", exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]);\n\n  return (\n    <div className=\"container mx-auto my-10\">\n      <button className=\"rounded-lg p-3\" onClick={clearCanvas}>\n        delete\n      </button>\n      <canvas\n        ref={canvasRef}\n        height={height}\n        width={width}\n        className=\"rounded-lg bg-gray-200\"\n      />\n    </div>\n  );\n}\n\nApp.defaultProps = {\n  width: 800,\n  height: 600,\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}