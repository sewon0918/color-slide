[{"/Users/imsewon/Desktop/color-slide/src/index.tsx":"1","/Users/imsewon/Desktop/color-slide/src/reportWebVitals.ts":"2","/Users/imsewon/Desktop/color-slide/src/App.tsx":"3","/Users/imsewon/Desktop/color-slide/src/ColorBar.tsx":"4"},{"size":500,"mtime":1643822629513,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1643822629513,"results":"7","hashOfConfig":"6"},{"size":5679,"mtime":1644169994674,"results":"8","hashOfConfig":"6"},{"size":2960,"mtime":1644172097516,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"x5zk8q",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/imsewon/Desktop/color-slide/src/index.tsx",[],[],["25","26"],"/Users/imsewon/Desktop/color-slide/src/reportWebVitals.ts",[],[],"/Users/imsewon/Desktop/color-slide/src/App.tsx",["27","28"],[],"import { Console } from \"console\";\nimport React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport { SketchPicker } from \"react-color\";\nimport { ColorBar } from \"./ColorBar\";\n\ninterface CanvasProps {\n  width: number;\n  height: number;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction App({ width, height }: CanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(\n    undefined\n  );\n  const [isPainting, setIsPainting] = useState(false);\n\n  const getCoordinates = (event: MouseEvent): Coordinate | undefined => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop,\n    };\n  };\n\n  const drawLine = (\n    originalMousePosition: Coordinate,\n    newMousePosition: Coordinate\n  ) => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (context) {\n      context.strokeStyle = \"red\";\n      context.lineJoin = \"round\";\n      context.lineWidth = 5;\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n\n      context.stroke();\n    }\n  };\n\n  const startPaint = useCallback((event: MouseEvent) => {\n    const coordinates = getCoordinates(event);\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n    }\n  }, []);\n\n  const paint = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isPainting) {\n        const newMousePosition = getCoordinates(event);\n        if (mousePosition && newMousePosition) {\n          drawLine(mousePosition, newMousePosition);\n          setMousePosition(newMousePosition);\n        }\n      }\n    },\n    [isPainting, mousePosition]\n  );\n\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n  }, []);\n\n  const clearCanvas = () => {\n    console.log(\"delete\");\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    canvas.getContext(\"2d\")!!.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n\n    canvas.addEventListener(\"mousedown\", startPaint);\n    canvas.addEventListener(\"mousemove\", paint);\n    canvas.addEventListener(\"mouseup\", exitPaint);\n    // canvas.addEventListener(\"mouseleave\", exitPaint);\n\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startPaint);\n      canvas.removeEventListener(\"mousemove\", paint);\n      canvas.removeEventListener(\"mouseup\", exitPaint);\n      // canvas.removeEventListener(\"mouseleave\", exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]);\n\n  // const slider: HTMLElement | null = document.querySelector(\"#slider\");\n  // const picker: HTMLElement | null = document.querySelector(\"#picker\");\n  // let shiftX: number = 0;\n  // let newLeft: number = 0;\n  // const onMouseDown = (e: MouseEvent) => {\n  //   e.preventDefault();\n  //   console.log(\"왜안돼\");\n  //   if (picker) {\n  //     console.log(picker.getBoundingClientRect().left);\n  //     console.log(e.clientX);\n  //     shiftX = e.clientX - picker.getBoundingClientRect().left;\n  //     console.log(shiftX);\n  //     document.addEventListener(\"mousemove\", onMouseMove);\n  //     document.addEventListener(\"mouseup\", onMouseUp);\n  //   }\n  // };\n  // function onMouseMove(e: MouseEvent) {\n  //   newLeft = e.clientX - shiftX - slider!.getBoundingClientRect().left;\n  //   console.log(newLeft);\n  //   // the pointer is out of slider => lock the thumb within the bounaries\n  //   if (newLeft < 0) {\n  //     newLeft = 0;\n  //   }\n  //   let rightEdge = slider!.offsetWidth - picker!.offsetWidth;\n  //   if (newLeft > rightEdge) {\n  //     newLeft = rightEdge;\n  //   }\n  //   picker!.style.left = newLeft + \"px\";\n  //   // if (!canvasRef.current) {\n  //   //   return;\n  //   // }\n  //   // const canvas: HTMLCanvasElement = canvasRef.current;\n  //   // const context = canvas.getContext(\"2d\");\n  //   // if (context) {\n  //   //   var c = context.getImageData(newLeft, e.clientY, 1, 1).data;\n  //   //   console.log(c[0], c[1], c[2]);\n  //   // }\n  // }\n\n  // function onMouseUp() {\n  //   document.removeEventListener(\"mouseup\", onMouseUp);\n  //   document.removeEventListener(\"mousemove\", onMouseMove);\n  // }\n\n  return (\n    <div className=\"container mx-auto my-10\">\n      <canvas\n        ref={canvasRef}\n        height={height}\n        width={width}\n        className=\"rounded-lg bg-gray-200\"\n      />\n      <button className=\"rounded-lg p-3 mt-3 bg-gray-100\" onClick={clearCanvas}>\n        delete\n      </button>\n      {/* <SketchPicker /> */}\n      {/* <div\n        className=\"w-96 h-10 rounded-full bg-gradient-to-r from-black to-real-red\"\n        id=\"slider\"\n      >\n        <div\n          className=\"w-10 h-10 x-10 border-4 border-white rounded-full bg-transparent\"\n          style={{ position: \"relative\", left: \"0px\" }}\n          onMouseDown={(event: any) => {\n            onMouseDown(event);\n          }}\n          id=\"picker\"\n        />\n      </div> */}\n      <ColorBar change={0} fixed1={\"00\"} fixed2={\"00\"} />\n      <ColorBar change={1} fixed1={\"00\"} fixed2={\"00\"} />\n      <ColorBar change={2} fixed1={\"00\"} fixed2={\"00\"} />\n    </div>\n  );\n}\n\nApp.defaultProps = {\n  width: 800,\n  height: 600,\n};\n\nexport default App;\n","/Users/imsewon/Desktop/color-slide/src/ColorBar.tsx",["29","30","31","32","33","34","35"],[],"import React, { useRef, useState, useCallback, useEffect } from \"react\";\n\ninterface ColorProps {\n  change: number; // 0:red, 1:green, 2:blue\n  fixed1: string;\n  fixed2: string;\n}\n\nexport function ColorBar({ change, fixed1, fixed2 }: ColorProps) {\n  const colorChange = useRef();\n  let fromColor: string = \"#\";\n  let toColor: string = \"#\";\n  if (change == 0) {\n    fromColor += \"00\" + fixed1 + fixed2;\n    toColor += \"ff\" + fixed1 + fixed2;\n  } else if (change == 1) {\n    fromColor += fixed1 + \"00\" + fixed2;\n    toColor += fixed1 + \"ff\" + fixed2;\n  } else {\n    fromColor += fixed1 + fixed2 + \"00\";\n    toColor += fixed1 + fixed2 + \"ff\";\n  }\n  console.log(change, fromColor, toColor);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const slider: HTMLElement | null = document.querySelector(\n    \"#slider\"\n  ) as HTMLElement;\n  const picker: HTMLElement | null = document.querySelector(\n    \"#picker\"\n  ) as HTMLElement;\n  console.log(document.querySelector(\"#picker\") as HTMLDivElement);\n  let shiftX: number = 0;\n  let newLeft: number = 0;\n  const onMouseDown = (e: MouseEvent) => {\n    e.preventDefault();\n    console.log(\"mousedown\", change);\n    if (picker) {\n      console.log(picker.getBoundingClientRect().left);\n      console.log(e.clientX);\n      shiftX = e.clientX - picker.getBoundingClientRect().left;\n      console.log(shiftX);\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n    }\n  };\n  function onMouseMove(e: MouseEvent) {\n    newLeft = e.clientX - shiftX - slider!.getBoundingClientRect().left;\n    console.log(newLeft);\n    // the pointer is out of slider => lock the thumb within the bounaries\n    if (newLeft < 0) {\n      newLeft = 0;\n    }\n    let rightEdge = slider!.offsetWidth - picker!.offsetWidth;\n    if (newLeft > rightEdge) {\n      newLeft = rightEdge;\n    }\n    picker!.style.left = newLeft + \"px\";\n    // if (!canvasRef.current) {\n    //   return;\n    // }\n    // const canvas: HTMLCanvasElement = canvasRef.current;\n    // const context = canvas.getContext(\"2d\");\n    // if (context) {\n    //   var c = context.getImageData(newLeft, e.clientY, 1, 1).data;\n    //   console.log(c[0], c[1], c[2]);\n    // }\n  }\n\n  function onMouseUp() {\n    document.removeEventListener(\"mouseup\", onMouseUp);\n    document.removeEventListener(\"mousemove\", onMouseMove);\n  }\n\n  return (\n    <div>\n      <div\n        className=\"w-96 h-10 rounded-full mb-4\"\n        style={{\n          background: `linear-gradient(to right, ${fromColor}, ${toColor})`,\n        }}\n        id=\"slider\"\n      >\n        <div\n          className=\"w-10 h-10 x-10 border-4 border-white rounded-full bg-transparent\"\n          style={{ position: \"relative\", left: \"0px\" }}\n          onMouseDown={(event: any) => {\n            onMouseDown(event);\n          }}\n          id=\"picker\"\n        />\n      </div>\n    </div>\n  );\n}\n\nColorBar.defaultProps = {\n  change: 0,\n  fixed1: \"00\",\n  fixed2: \"00\",\n};\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":10,"nodeType":"42","messageId":"43","endLine":1,"endColumn":17},{"ruleId":"40","severity":1,"message":"44","line":3,"column":10,"nodeType":"42","messageId":"43","endLine":3,"endColumn":22},{"ruleId":"40","severity":1,"message":"45","line":1,"column":25,"nodeType":"42","messageId":"43","endLine":1,"endColumn":33},{"ruleId":"40","severity":1,"message":"46","line":1,"column":35,"nodeType":"42","messageId":"43","endLine":1,"endColumn":46},{"ruleId":"40","severity":1,"message":"47","line":1,"column":48,"nodeType":"42","messageId":"43","endLine":1,"endColumn":57},{"ruleId":"40","severity":1,"message":"48","line":10,"column":9,"nodeType":"42","messageId":"43","endLine":10,"endColumn":20},{"ruleId":"49","severity":1,"message":"50","line":13,"column":14,"nodeType":"51","messageId":"52","endLine":13,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":16,"column":21,"nodeType":"51","messageId":"52","endLine":16,"endColumn":23},{"ruleId":"40","severity":1,"message":"53","line":25,"column":9,"nodeType":"42","messageId":"43","endLine":25,"endColumn":18},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'Console' is defined but never used.","Identifier","unusedVar","'SketchPicker' is defined but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'colorChange' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'canvasRef' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]