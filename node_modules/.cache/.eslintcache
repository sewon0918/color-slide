[{"/Users/imsewon/Desktop/color-slide/src/index.tsx":"1","/Users/imsewon/Desktop/color-slide/src/reportWebVitals.ts":"2","/Users/imsewon/Desktop/color-slide/src/App.tsx":"3"},{"size":500,"mtime":1643822629513,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1643822629513,"results":"6","hashOfConfig":"5"},{"size":4990,"mtime":1644090067315,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"x5zk8q",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/imsewon/Desktop/color-slide/src/index.tsx",[],[],["19","20"],"/Users/imsewon/Desktop/color-slide/src/reportWebVitals.ts",[],[],"/Users/imsewon/Desktop/color-slide/src/App.tsx",["21"],[],"import React, { useRef, useState, useCallback, useEffect } from \"react\";\nimport { SketchPicker } from \"react-color\";\n\ninterface CanvasProps {\n  width: number;\n  height: number;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction App({ width, height }: CanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(\n    undefined\n  );\n  const [isPainting, setIsPainting] = useState(false);\n\n  const getCoordinates = (event: MouseEvent): Coordinate | undefined => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop,\n    };\n  };\n\n  const drawLine = (\n    originalMousePosition: Coordinate,\n    newMousePosition: Coordinate\n  ) => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (context) {\n      context.strokeStyle = \"red\";\n      context.lineJoin = \"round\";\n      context.lineWidth = 5;\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n\n      context.stroke();\n    }\n  };\n\n  const startPaint = useCallback((event: MouseEvent) => {\n    const coordinates = getCoordinates(event);\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n    }\n  }, []);\n\n  const paint = useCallback(\n    (event: MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (isPainting) {\n        const newMousePosition = getCoordinates(event);\n        if (mousePosition && newMousePosition) {\n          drawLine(mousePosition, newMousePosition);\n          setMousePosition(newMousePosition);\n        }\n      }\n    },\n    [isPainting, mousePosition]\n  );\n\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n  }, []);\n\n  const clearCanvas = () => {\n    console.log(\"delete\");\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    canvas.getContext(\"2d\")!!.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n    const canvas: HTMLCanvasElement = canvasRef.current;\n\n    canvas.addEventListener(\"mousedown\", startPaint);\n    canvas.addEventListener(\"mousemove\", paint);\n    canvas.addEventListener(\"mouseup\", exitPaint);\n    // canvas.addEventListener(\"mouseleave\", exitPaint);\n\n    return () => {\n      canvas.removeEventListener(\"mousedown\", startPaint);\n      canvas.removeEventListener(\"mousemove\", paint);\n      canvas.removeEventListener(\"mouseup\", exitPaint);\n      // canvas.removeEventListener(\"mouseleave\", exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]);\n\n  const slider: HTMLElement | null = document.querySelector(\"#slider\");\n  const picker: HTMLElement | null = document.querySelector(\"#picker\");\n  let shiftX: number = 0;\n  let newLeft: number = 0;\n  const onMouseDown = (e: MouseEvent) => {\n    e.preventDefault();\n    console.log(\"왜안돼\");\n    if (picker) {\n      console.log(picker.getBoundingClientRect().left);\n      console.log(e.clientX);\n      let shiftX = e.clientX - picker.getBoundingClientRect().left;\n      console.log(shiftX);\n      document.addEventListener(\"mousemove\", onMouseMove);\n      document.addEventListener(\"mouseup\", onMouseUp);\n    }\n  };\n  function onMouseMove(e: MouseEvent) {\n    newLeft = e.clientX - shiftX - slider!.getBoundingClientRect().left;\n    console.log(newLeft);\n    // the pointer is out of slider => lock the thumb within the bounaries\n    if (newLeft < 0) {\n      newLeft = 0;\n    }\n    let rightEdge = slider!.offsetWidth - picker!.offsetWidth;\n    if (newLeft > rightEdge) {\n      newLeft = rightEdge;\n    }\n    picker!.style.left = newLeft + \"px\";\n  }\n\n  function onMouseUp() {\n    document.removeEventListener(\"mouseup\", onMouseUp);\n    document.removeEventListener(\"mousemove\", onMouseMove);\n  }\n\n  return (\n    <div className=\"container mx-auto my-10\">\n      <canvas\n        ref={canvasRef}\n        height={height}\n        width={width}\n        className=\"rounded-lg bg-gray-200\"\n      />\n      <button className=\"rounded-lg p-3 mt-3 bg-gray-100\" onClick={clearCanvas}>\n        delete\n      </button>\n      {/* <SketchPicker /> */}\n      <div\n        className=\"w-96 h-10 rounded-full bg-gradient-to-r from-black to-real-red\"\n        id=\"slider\"\n      >\n        <div\n          className=\"w-10 h-10 x-10 border-4 border-white rounded-full bg-gray-500\"\n          style={{ position: \"relative\", left: \"0px\" }}\n          onMouseDown={(event: any) => {\n            onMouseDown(event);\n          }}\n          id=\"picker\"\n        />\n      </div>\n    </div>\n  );\n}\n\nApp.defaultProps = {\n  width: 800,\n  height: 600,\n};\n\nexport default App;\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":2,"column":10,"nodeType":"28","messageId":"29","endLine":2,"endColumn":22},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"@typescript-eslint/no-unused-vars","'SketchPicker' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]